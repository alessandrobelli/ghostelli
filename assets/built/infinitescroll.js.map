{"version":3,"file":"infinitescroll.js","sources":["infinitescroll.js"],"sourcesContent":["/* global maxPages */\r\n\r\n// Code snippet inspired by https://github.com/douglasrodrigues5/ghost-blog-infinite-scroll\r\n$(function ($) {\r\n    var currentPage = 1;\r\n    var pathname = window.location.pathname;\r\n    var $document = $(document);\r\n    var $result = $('.gh-postfeed');\r\n    var buffer = 10;\r\n\r\n    var ticking = false;\r\n    var isLoading = false;\r\n\r\n    var lastScrollY = window.scrollY;\r\n    var lastWindowHeight = window.innerHeight;\r\n    var lastDocumentHeight = $document.height();\r\n\r\n    function onScroll() {\r\n        lastScrollY = window.scrollY;\r\n        requestTick();\r\n    }\r\n\r\n    function onResize() {\r\n        lastWindowHeight = window.innerHeight;\r\n        lastDocumentHeight = $document.height();\r\n        requestTick();\r\n    }\r\n\r\n    function requestTick() {\r\n        if (!ticking) {\r\n            requestAnimationFrame(infiniteScroll);\r\n        }\r\n        ticking = true;\r\n    }\r\n\r\n    function sanitizePathname(path) {\r\n        var paginationRegex = /(?:page\\/)(\\d)(?:\\/)$/i;\r\n\r\n        // remove hash params from path\r\n        path = path.replace(/#(.*)$/g, '').replace('////g', '/');\r\n\r\n        // remove pagination from the path and replace the current pages\r\n        // with the actual requested page. E. g. `/page/3/` indicates that\r\n        // the user actually requested page 3, so we should request page 4\r\n        // next, unless it's the last page already.\r\n        if (path.match(paginationRegex)) {\r\n            currentPage = parseInt(path.match(paginationRegex)[1]);\r\n\r\n            path = path.replace(paginationRegex, '');\r\n        }\r\n\r\n        return path;\r\n    }\r\n\r\n    function infiniteScroll() {\r\n        // sanitize the pathname from possible pagination or hash params\r\n        pathname = sanitizePathname(pathname);\r\n\r\n        // return if already loading\r\n        if (isLoading) {\r\n            return;\r\n        }\r\n\r\n        // return if not scroll to the bottom\r\n        if (lastScrollY + lastWindowHeight <= lastDocumentHeight - buffer) {\r\n            ticking = false;\r\n            return;\r\n        }\r\n\r\n        /**\r\n        * maxPages is defined in default.hbs and is the value\r\n        * of the amount of pagination pages.\r\n        * If we reached the last page or are past it,\r\n        * we return and disable the listeners.\r\n        */\r\n        if (currentPage >= maxPages) {\r\n            window.removeEventListener('scroll', onScroll, { passive: true });\r\n            window.removeEventListener('resize', onResize);\r\n            return;\r\n        }\r\n\r\n        isLoading = true;\r\n\r\n        // next page\r\n        currentPage += 1;\r\n\r\n        // Load more\r\n        var nextPage = pathname + 'page/' + currentPage + '/';\r\n\r\n        $.get(nextPage, function (content) {\r\n            var parse = document.createRange().createContextualFragment(content);\r\n            var posts = parse.querySelectorAll('.post');\r\n            if (posts.length) {\r\n                [].forEach.call(posts, function (post) {\r\n                    $result[0].appendChild(post);\r\n                });\r\n            }\r\n        }).fail(function (xhr) {\r\n            // 404 indicates we've run out of pages\r\n            if (xhr.status === 404) {\r\n                window.removeEventListener('scroll', onScroll, { passive: true });\r\n                window.removeEventListener('resize', onResize);\r\n            }\r\n        }).always(function () {\r\n            lastDocumentHeight = $document.height();\r\n            isLoading = false;\r\n            ticking = false;\r\n        });\r\n    }\r\n\r\n    window.addEventListener('scroll', onScroll, { passive: true });\r\n    window.addEventListener('resize', onResize);\r\n\r\n    infiniteScroll();\r\n});\r\n"],"names":["$","currentPage","pathname","window","location","$document","document","$result","buffer","ticking","isLoading","lastScrollY","scrollY","lastWindowHeight","innerHeight","lastDocumentHeight","height","onScroll","requestTick","onResize","requestAnimationFrame","infiniteScroll","path","nextPage","paginationRegex","replace","match","parseInt","maxPages","removeEventListener","passive","get","content","posts","createRange","createContextualFragment","querySelectorAll","length","forEach","call","post","appendChild","fail","xhr","status","always","addEventListener"],"mappings":"AAGAA,EAAE,SAAUA,GACR,IAAIC,EAAc,EACdC,EAAWC,OAAOC,SAASF,SAC3BG,EAAYL,EAAEM,QAAQ,EACtBC,EAAUP,EAAE,cAAc,EAC1BQ,EAAS,GAETC,EAAU,CAAA,EACVC,EAAY,CAAA,EAEZC,EAAcR,OAAOS,QACrBC,EAAmBV,OAAOW,YAC1BC,EAAqBV,EAAUW,OAAO,EAE1C,SAASC,IACLN,EAAcR,OAAOS,QACrBM,EAAY,CAChB,CAEA,SAASC,IACLN,EAAmBV,OAAOW,YAC1BC,EAAqBV,EAAUW,OAAO,EACtCE,EAAY,CAChB,CAEA,SAASA,IACAT,GACDW,sBAAsBC,CAAc,EAExCZ,EAAU,CAAA,CACd,CAqBA,SAASY,IAnBT,IAA0BC,EAoDlBC,EAnDAC,EAAkB,0BAGtBF,GAJsBA,EAqBMpB,GAjBhBuB,QAAQ,UAAW,EAAE,EAAEA,QAAQ,QAAS,GAAG,GAM9CC,MAAMF,CAAe,IAC1BvB,EAAc0B,SAASL,EAAKI,MAAMF,CAAe,EAAE,EAAE,EAErDF,EAAOA,EAAKG,QAAQD,EAAiB,EAAE,GAQ3CtB,EALOoB,EAQHZ,IAKAC,EAAcE,GAAoBE,EAAqBP,EACvDC,EAAU,CAAA,EAUVR,GAAe2B,UACfzB,OAAO0B,oBAAoB,SAAUZ,EAAU,CAAEa,QAAS,CAAA,CAAK,CAAC,EAChE3B,OAAO0B,oBAAoB,SAAUV,CAAQ,IAIjDT,EAAY,CAAA,EAMRa,EAAWrB,EAAW,SAH1BD,GAAe,GAGmC,IAElDD,EAAE+B,IAAIR,EAAU,SAAUS,GAElBC,EADQ3B,SAAS4B,YAAY,EAAEC,yBAAyBH,CAAO,EACjDI,iBAAiB,OAAO,EACtCH,EAAMI,QACN,GAAGC,QAAQC,KAAKN,EAAO,SAAUO,GAC7BjC,EAAQ,GAAGkC,YAAYD,CAAI,CAC/B,CAAC,CAET,CAAC,EAAEE,KAAK,SAAUC,GAEK,MAAfA,EAAIC,SACJzC,OAAO0B,oBAAoB,SAAUZ,EAAU,CAAEa,QAAS,CAAA,CAAK,CAAC,EAChE3B,OAAO0B,oBAAoB,SAAUV,CAAQ,EAErD,CAAC,EAAE0B,OAAO,WACN9B,EAAqBV,EAAUW,OAAO,EAEtCP,EADAC,EAAY,CAAA,CAEhB,CAAC,GACL,CAEAP,OAAO2C,iBAAiB,SAAU7B,EAAU,CAAEa,QAAS,CAAA,CAAK,CAAC,EAC7D3B,OAAO2C,iBAAiB,SAAU3B,CAAQ,EAE1CE,EAAe,CACnB,CAAC"}